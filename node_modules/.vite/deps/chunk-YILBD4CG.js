import {
  require_verilog
} from "./chunk-GG3REE7Z.js";
import {
  require_vhdl
} from "./chunk-NISL4MBD.js";
import {
  require_vim
} from "./chunk-VAH5NZGR.js";
import {
  require_x86asm
} from "./chunk-JJ65JYAD.js";
import {
  require_xl
} from "./chunk-77YYNBEI.js";
import {
  require_xquery
} from "./chunk-ZP3UWVEE.js";
import {
  require_zephir
} from "./chunk-ENPJMPF7.js";
import {
  require_thrift
} from "./chunk-B5JY3Y5L.js";
import {
  require_tp
} from "./chunk-TGSRTQ7A.js";
import {
  require_twig
} from "./chunk-FPNYOI2E.js";
import {
  require_typescript
} from "./chunk-U5V52VDH.js";
import {
  require_vala
} from "./chunk-U6HXHZRM.js";
import {
  require_vbnet
} from "./chunk-7CJWMO7T.js";
import {
  require_vbscript
} from "./chunk-6Y6IYXVG.js";
import {
  require_vbscript_html
} from "./chunk-4NQ642WI.js";
import {
  require_step21
} from "./chunk-CQOZC6ZN.js";
import {
  require_stylus
} from "./chunk-77EQ7XDC.js";
import {
  require_subunit
} from "./chunk-YGAIWZ7T.js";
import {
  require_swift
} from "./chunk-SSORSKUN.js";
import {
  require_taggerscript
} from "./chunk-S5ODHRXO.js";
import {
  require_yaml
} from "./chunk-FGN3TC7T.js";
import {
  require_tap
} from "./chunk-XLT2NO5W.js";
import {
  require_tcl
} from "./chunk-X6HOMJAT.js";
import {
  require_smali
} from "./chunk-U4DOEC4P.js";
import {
  require_smalltalk
} from "./chunk-4GCBACVU.js";
import {
  require_sml
} from "./chunk-LKTOY6V5.js";
import {
  require_sqf
} from "./chunk-6CRFOFLE.js";
import {
  require_sql_more
} from "./chunk-SUJHRMOL.js";
import {
  require_sql
} from "./chunk-75TZBEA2.js";
import {
  require_stan
} from "./chunk-NZQNLLWR.js";
import {
  require_stata
} from "./chunk-3B7QUGAZ.js";
import {
  require_ruleslanguage
} from "./chunk-WWVUVMUL.js";
import {
  require_rust
} from "./chunk-J6VYUZLF.js";
import {
  require_sas
} from "./chunk-RZBNPA5I.js";
import {
  require_scala
} from "./chunk-5RTW376R.js";
import {
  require_scheme
} from "./chunk-ABEI6QUN.js";
import {
  require_scilab
} from "./chunk-W676ZZTA.js";
import {
  require_scss
} from "./chunk-TMYACQ3T.js";
import {
  require_shell
} from "./chunk-DF575RE4.js";
import {
  require_q
} from "./chunk-A5VQX5CQ.js";
import {
  require_qml
} from "./chunk-UHLXBAGB.js";
import {
  require_r
} from "./chunk-DETH5MM3.js";
import {
  require_reasonml
} from "./chunk-HKLKKH42.js";
import {
  require_rib
} from "./chunk-33YS4G23.js";
import {
  require_roboconf
} from "./chunk-HX4WEEVJ.js";
import {
  require_routeros
} from "./chunk-MSICE7J3.js";
import {
  require_rsl
} from "./chunk-EZFGECNS.js";
import {
  require_profile
} from "./chunk-FC4KMLBY.js";
import {
  require_prolog
} from "./chunk-4GFQZY2Y.js";
import {
  require_properties
} from "./chunk-UEKFMI2N.js";
import {
  require_protobuf
} from "./chunk-ZST3OFZ7.js";
import {
  require_puppet
} from "./chunk-GMDEQW6U.js";
import {
  require_purebasic
} from "./chunk-AGUWWO5T.js";
import {
  require_python
} from "./chunk-3FDSABNC.js";
import {
  require_python_repl
} from "./chunk-LZPEYNC6.js";
import {
  require_pf
} from "./chunk-EEIUCQSA.js";
import {
  require_pgsql
} from "./chunk-3DYJ776N.js";
import {
  require_php
} from "./chunk-BMDBTLT2.js";
import {
  require_php_template
} from "./chunk-KN4YPZD3.js";
import {
  require_plaintext
} from "./chunk-GVRQKDFC.js";
import {
  require_pony
} from "./chunk-PUS4DNB3.js";
import {
  require_powershell
} from "./chunk-2TX6PLKA.js";
import {
  require_processing
} from "./chunk-3UA74623.js";
import {
  require_nix
} from "./chunk-OOQRO44J.js";
import {
  require_node_repl
} from "./chunk-XRLJJGNB.js";
import {
  require_nsis
} from "./chunk-PVNGIIE5.js";
import {
  require_objectivec
} from "./chunk-XU6A2VVR.js";
import {
  require_ocaml
} from "./chunk-HFBM76BW.js";
import {
  require_openscad
} from "./chunk-YAWZKRMY.js";
import {
  require_oxygene
} from "./chunk-GHOJGV4V.js";
import {
  require_parser3
} from "./chunk-G6HHRELS.js";
import {
  require_mizar
} from "./chunk-PRON4D5L.js";
import {
  require_perl
} from "./chunk-5HVANEOH.js";
import {
  require_mojolicious
} from "./chunk-34ANARV3.js";
import {
  require_monkey
} from "./chunk-KQTEECI5.js";
import {
  require_moonscript
} from "./chunk-DYS3L6XC.js";
import {
  require_n1ql
} from "./chunk-43IRFAZN.js";
import {
  require_nginx
} from "./chunk-EPHSA224.js";
import {
  require_nim
} from "./chunk-JF6HOPAC.js";
import {
  require_lua
} from "./chunk-ZGLJML76.js";
import {
  require_makefile
} from "./chunk-P3O3WLLF.js";
import {
  require_mathematica
} from "./chunk-TPAO35FK.js";
import {
  require_matlab
} from "./chunk-75H2XS67.js";
import {
  require_maxima
} from "./chunk-GUUL3IL6.js";
import {
  require_mel
} from "./chunk-4HZLLSCQ.js";
import {
  require_mercury
} from "./chunk-CRX5BZQP.js";
import {
  require_mipsasm
} from "./chunk-52AIML54.js";
import {
  require_ldif
} from "./chunk-XZYT4O2V.js";
import {
  require_leaf
} from "./chunk-WSISBWM3.js";
import {
  require_less
} from "./chunk-GQTVCH3X.js";
import {
  require_lisp
} from "./chunk-VLV25N4O.js";
import {
  require_livecodeserver
} from "./chunk-YMNFGO43.js";
import {
  require_livescript
} from "./chunk-IYTWQRUV.js";
import {
  require_llvm
} from "./chunk-7IQ4J6VB.js";
import {
  require_lsl
} from "./chunk-GQD6NM44.js";
import {
  require_javascript
} from "./chunk-7ECENDSB.js";
import {
  require_jboss_cli
} from "./chunk-H5JT4YMJ.js";
import {
  require_json
} from "./chunk-O7RR3W2V.js";
import {
  require_julia
} from "./chunk-SKLO2KGW.js";
import {
  require_julia_repl
} from "./chunk-WKXPHMB6.js";
import {
  require_kotlin
} from "./chunk-52QP3CVQ.js";
import {
  require_lasso
} from "./chunk-3G4JMPI6.js";
import {
  require_latex
} from "./chunk-UKZP52XK.js";
import {
  require_htmlbars
} from "./chunk-UV3MUBUA.js";
import {
  require_http
} from "./chunk-GQPXWBPL.js";
import {
  require_hy
} from "./chunk-P3WQSD6D.js";
import {
  require_inform7
} from "./chunk-SNUKIMPU.js";
import {
  require_ini
} from "./chunk-BOZD7NP2.js";
import {
  require_irpf90
} from "./chunk-MEZ7USSN.js";
import {
  require_isbl
} from "./chunk-OOBLYBLL.js";
import {
  require_java
} from "./chunk-HUFULBKE.js";
import {
  require_golo
} from "./chunk-2W6IFAIU.js";
import {
  require_gradle
} from "./chunk-TK7PG3E7.js";
import {
  require_groovy
} from "./chunk-545P5ZJ5.js";
import {
  require_haml
} from "./chunk-XH6OKJGT.js";
import {
  require_handlebars
} from "./chunk-BPJDQGXS.js";
import {
  require_haskell
} from "./chunk-XKYPTWMQ.js";
import {
  require_haxe
} from "./chunk-6A2E53SX.js";
import {
  require_hsp
} from "./chunk-5KM6NDZR.js";
import {
  require_fsharp
} from "./chunk-ABFRSTCX.js";
import {
  require_gams
} from "./chunk-KMWAB5VO.js";
import {
  require_gauss
} from "./chunk-JUWHKJDV.js";
import {
  require_gcode
} from "./chunk-PTEXX37C.js";
import {
  require_gherkin
} from "./chunk-PY6B735N.js";
import {
  require_glsl
} from "./chunk-5RBMKQYA.js";
import {
  require_gml
} from "./chunk-LHQSXGRM.js";
import {
  require_go
} from "./chunk-V426NUYS.js";
import {
  require_ruby
} from "./chunk-D72QD6JT.js";
import {
  require_erb
} from "./chunk-ZCPO6SKK.js";
import {
  require_erlang_repl
} from "./chunk-O4Q65ACW.js";
import {
  require_erlang
} from "./chunk-X4ZY7CSC.js";
import {
  require_excel
} from "./chunk-TZJSGFUD.js";
import {
  require_fix
} from "./chunk-BMAGM4XZ.js";
import {
  require_flix
} from "./chunk-Y67FBCFC.js";
import {
  require_fortran
} from "./chunk-KTYVAXNU.js";
import {
  require_dockerfile
} from "./chunk-HHNX7BX4.js";
import {
  require_dos
} from "./chunk-UKE7WYCU.js";
import {
  require_dsconfig
} from "./chunk-VHWEXZDM.js";
import {
  require_dts
} from "./chunk-DXKA6KN3.js";
import {
  require_dust
} from "./chunk-52AWOB37.js";
import {
  require_ebnf
} from "./chunk-6I63HBDY.js";
import {
  require_elixir
} from "./chunk-EKTOCUKC.js";
import {
  require_elm
} from "./chunk-5KFUPXE5.js";
import {
  require_css
} from "./chunk-EGWEKPUO.js";
import {
  require_d
} from "./chunk-JMIWZ7CC.js";
import {
  require_markdown
} from "./chunk-DMZXLDHO.js";
import {
  require_dart
} from "./chunk-ZTIGIV5L.js";
import {
  require_delphi
} from "./chunk-XTVAFWW4.js";
import {
  require_diff
} from "./chunk-PRLEYGHV.js";
import {
  require_django
} from "./chunk-43T6Q4KV.js";
import {
  require_dns
} from "./chunk-O7GTLMOL.js";
import {
  require_coffeescript
} from "./chunk-IOGZ3XXX.js";
import {
  require_coq
} from "./chunk-RJE3UIZ2.js";
import {
  require_cos
} from "./chunk-FZO56SVY.js";
import {
  require_cpp
} from "./chunk-RSZXT3BV.js";
import {
  require_crmsh
} from "./chunk-HMFGBJZC.js";
import {
  require_crystal
} from "./chunk-M45EO3NY.js";
import {
  require_csharp
} from "./chunk-WH7CHVKE.js";
import {
  require_csp
} from "./chunk-WNKKINCX.js";
import {
  require_c as require_c2
} from "./chunk-PL55H55C.js";
import {
  require_cal
} from "./chunk-YTOQ6QWB.js";
import {
  require_capnproto
} from "./chunk-Y7YNFK7H.js";
import {
  require_ceylon
} from "./chunk-QNU6LMYO.js";
import {
  require_clean
} from "./chunk-ITDCIAKF.js";
import {
  require_clojure
} from "./chunk-COLWLPFG.js";
import {
  require_clojure_repl
} from "./chunk-24HREAKS.js";
import {
  require_cmake
} from "./chunk-KJYIJVQY.js";
import {
  require_avrasm
} from "./chunk-ZF6RPY6K.js";
import {
  require_awk
} from "./chunk-S74VPYZN.js";
import {
  require_axapta
} from "./chunk-FJJT2YLW.js";
import {
  require_bash
} from "./chunk-VKCK6T6T.js";
import {
  require_basic
} from "./chunk-2JCJFLV3.js";
import {
  require_bnf
} from "./chunk-VNSIEXRO.js";
import {
  require_brainfuck
} from "./chunk-YXIHCP6P.js";
import {
  require_c_like
} from "./chunk-4C4VSP56.js";
import {
  require_arcade
} from "./chunk-C354NMDE.js";
import {
  require_arduino
} from "./chunk-7N3EDHTR.js";
import {
  require_armasm
} from "./chunk-TYQIHDLA.js";
import {
  require_xml
} from "./chunk-2YBQAAM6.js";
import {
  require_asciidoc
} from "./chunk-2W5PFIWR.js";
import {
  require_aspectj
} from "./chunk-4QIHKOWV.js";
import {
  require_autohotkey
} from "./chunk-HNH4AXUW.js";
import {
  require_autoit
} from "./chunk-GAASC6S6.js";
import {
  require_c
} from "./chunk-CNYKI6HR.js";
import {
  require_abnf
} from "./chunk-EYBT7MBV.js";
import {
  require_accesslog
} from "./chunk-JCIDDBQ7.js";
import {
  require_actionscript
} from "./chunk-HUPJNH56.js";
import {
  require_ada
} from "./chunk-5ILVKWQ5.js";
import {
  require_angelscript
} from "./chunk-2X4TAVXQ.js";
import {
  require_apache
} from "./chunk-DMTAL6JD.js";
import {
  require_applescript
} from "./chunk-AEYATLQ2.js";
import {
  default_style_default
} from "./chunk-T3ZZRPXQ.js";
import {
  require_core
} from "./chunk-TC6EDN7Q.js";
import {
  _extends,
  _objectWithoutPropertiesLoose,
  init_extends,
  toPropertyKey
} from "./chunk-MML2OMQC.js";
import {
  require_react
} from "./chunk-QJTFJ6OV.js";
import {
  __commonJS,
  __toESM
} from "./chunk-V4OQ3NZ2.js";

// node_modules/lowlight/index.js
var require_lowlight = __commonJS({
  "node_modules/lowlight/index.js"(exports, module) {
    "use strict";
    var low = require_core();
    module.exports = low;
    low.registerLanguage("1c", require_c());
    low.registerLanguage("abnf", require_abnf());
    low.registerLanguage(
      "accesslog",
      require_accesslog()
    );
    low.registerLanguage(
      "actionscript",
      require_actionscript()
    );
    low.registerLanguage("ada", require_ada());
    low.registerLanguage(
      "angelscript",
      require_angelscript()
    );
    low.registerLanguage("apache", require_apache());
    low.registerLanguage(
      "applescript",
      require_applescript()
    );
    low.registerLanguage("arcade", require_arcade());
    low.registerLanguage("arduino", require_arduino());
    low.registerLanguage("armasm", require_armasm());
    low.registerLanguage("xml", require_xml());
    low.registerLanguage("asciidoc", require_asciidoc());
    low.registerLanguage("aspectj", require_aspectj());
    low.registerLanguage(
      "autohotkey",
      require_autohotkey()
    );
    low.registerLanguage("autoit", require_autoit());
    low.registerLanguage("avrasm", require_avrasm());
    low.registerLanguage("awk", require_awk());
    low.registerLanguage("axapta", require_axapta());
    low.registerLanguage("bash", require_bash());
    low.registerLanguage("basic", require_basic());
    low.registerLanguage("bnf", require_bnf());
    low.registerLanguage(
      "brainfuck",
      require_brainfuck()
    );
    low.registerLanguage("c-like", require_c_like());
    low.registerLanguage("c", require_c2());
    low.registerLanguage("cal", require_cal());
    low.registerLanguage(
      "capnproto",
      require_capnproto()
    );
    low.registerLanguage("ceylon", require_ceylon());
    low.registerLanguage("clean", require_clean());
    low.registerLanguage("clojure", require_clojure());
    low.registerLanguage(
      "clojure-repl",
      require_clojure_repl()
    );
    low.registerLanguage("cmake", require_cmake());
    low.registerLanguage(
      "coffeescript",
      require_coffeescript()
    );
    low.registerLanguage("coq", require_coq());
    low.registerLanguage("cos", require_cos());
    low.registerLanguage("cpp", require_cpp());
    low.registerLanguage("crmsh", require_crmsh());
    low.registerLanguage("crystal", require_crystal());
    low.registerLanguage("csharp", require_csharp());
    low.registerLanguage("csp", require_csp());
    low.registerLanguage("css", require_css());
    low.registerLanguage("d", require_d());
    low.registerLanguage("markdown", require_markdown());
    low.registerLanguage("dart", require_dart());
    low.registerLanguage("delphi", require_delphi());
    low.registerLanguage("diff", require_diff());
    low.registerLanguage("django", require_django());
    low.registerLanguage("dns", require_dns());
    low.registerLanguage(
      "dockerfile",
      require_dockerfile()
    );
    low.registerLanguage("dos", require_dos());
    low.registerLanguage("dsconfig", require_dsconfig());
    low.registerLanguage("dts", require_dts());
    low.registerLanguage("dust", require_dust());
    low.registerLanguage("ebnf", require_ebnf());
    low.registerLanguage("elixir", require_elixir());
    low.registerLanguage("elm", require_elm());
    low.registerLanguage("ruby", require_ruby());
    low.registerLanguage("erb", require_erb());
    low.registerLanguage(
      "erlang-repl",
      require_erlang_repl()
    );
    low.registerLanguage("erlang", require_erlang());
    low.registerLanguage("excel", require_excel());
    low.registerLanguage("fix", require_fix());
    low.registerLanguage("flix", require_flix());
    low.registerLanguage("fortran", require_fortran());
    low.registerLanguage("fsharp", require_fsharp());
    low.registerLanguage("gams", require_gams());
    low.registerLanguage("gauss", require_gauss());
    low.registerLanguage("gcode", require_gcode());
    low.registerLanguage("gherkin", require_gherkin());
    low.registerLanguage("glsl", require_glsl());
    low.registerLanguage("gml", require_gml());
    low.registerLanguage("go", require_go());
    low.registerLanguage("golo", require_golo());
    low.registerLanguage("gradle", require_gradle());
    low.registerLanguage("groovy", require_groovy());
    low.registerLanguage("haml", require_haml());
    low.registerLanguage(
      "handlebars",
      require_handlebars()
    );
    low.registerLanguage("haskell", require_haskell());
    low.registerLanguage("haxe", require_haxe());
    low.registerLanguage("hsp", require_hsp());
    low.registerLanguage("htmlbars", require_htmlbars());
    low.registerLanguage("http", require_http());
    low.registerLanguage("hy", require_hy());
    low.registerLanguage("inform7", require_inform7());
    low.registerLanguage("ini", require_ini());
    low.registerLanguage("irpf90", require_irpf90());
    low.registerLanguage("isbl", require_isbl());
    low.registerLanguage("java", require_java());
    low.registerLanguage(
      "javascript",
      require_javascript()
    );
    low.registerLanguage(
      "jboss-cli",
      require_jboss_cli()
    );
    low.registerLanguage("json", require_json());
    low.registerLanguage("julia", require_julia());
    low.registerLanguage(
      "julia-repl",
      require_julia_repl()
    );
    low.registerLanguage("kotlin", require_kotlin());
    low.registerLanguage("lasso", require_lasso());
    low.registerLanguage("latex", require_latex());
    low.registerLanguage("ldif", require_ldif());
    low.registerLanguage("leaf", require_leaf());
    low.registerLanguage("less", require_less());
    low.registerLanguage("lisp", require_lisp());
    low.registerLanguage(
      "livecodeserver",
      require_livecodeserver()
    );
    low.registerLanguage(
      "livescript",
      require_livescript()
    );
    low.registerLanguage("llvm", require_llvm());
    low.registerLanguage("lsl", require_lsl());
    low.registerLanguage("lua", require_lua());
    low.registerLanguage("makefile", require_makefile());
    low.registerLanguage(
      "mathematica",
      require_mathematica()
    );
    low.registerLanguage("matlab", require_matlab());
    low.registerLanguage("maxima", require_maxima());
    low.registerLanguage("mel", require_mel());
    low.registerLanguage("mercury", require_mercury());
    low.registerLanguage("mipsasm", require_mipsasm());
    low.registerLanguage("mizar", require_mizar());
    low.registerLanguage("perl", require_perl());
    low.registerLanguage(
      "mojolicious",
      require_mojolicious()
    );
    low.registerLanguage("monkey", require_monkey());
    low.registerLanguage(
      "moonscript",
      require_moonscript()
    );
    low.registerLanguage("n1ql", require_n1ql());
    low.registerLanguage("nginx", require_nginx());
    low.registerLanguage("nim", require_nim());
    low.registerLanguage("nix", require_nix());
    low.registerLanguage(
      "node-repl",
      require_node_repl()
    );
    low.registerLanguage("nsis", require_nsis());
    low.registerLanguage(
      "objectivec",
      require_objectivec()
    );
    low.registerLanguage("ocaml", require_ocaml());
    low.registerLanguage("openscad", require_openscad());
    low.registerLanguage("oxygene", require_oxygene());
    low.registerLanguage("parser3", require_parser3());
    low.registerLanguage("pf", require_pf());
    low.registerLanguage("pgsql", require_pgsql());
    low.registerLanguage("php", require_php());
    low.registerLanguage(
      "php-template",
      require_php_template()
    );
    low.registerLanguage(
      "plaintext",
      require_plaintext()
    );
    low.registerLanguage("pony", require_pony());
    low.registerLanguage(
      "powershell",
      require_powershell()
    );
    low.registerLanguage(
      "processing",
      require_processing()
    );
    low.registerLanguage("profile", require_profile());
    low.registerLanguage("prolog", require_prolog());
    low.registerLanguage(
      "properties",
      require_properties()
    );
    low.registerLanguage("protobuf", require_protobuf());
    low.registerLanguage("puppet", require_puppet());
    low.registerLanguage(
      "purebasic",
      require_purebasic()
    );
    low.registerLanguage("python", require_python());
    low.registerLanguage(
      "python-repl",
      require_python_repl()
    );
    low.registerLanguage("q", require_q());
    low.registerLanguage("qml", require_qml());
    low.registerLanguage("r", require_r());
    low.registerLanguage("reasonml", require_reasonml());
    low.registerLanguage("rib", require_rib());
    low.registerLanguage("roboconf", require_roboconf());
    low.registerLanguage("routeros", require_routeros());
    low.registerLanguage("rsl", require_rsl());
    low.registerLanguage(
      "ruleslanguage",
      require_ruleslanguage()
    );
    low.registerLanguage("rust", require_rust());
    low.registerLanguage("sas", require_sas());
    low.registerLanguage("scala", require_scala());
    low.registerLanguage("scheme", require_scheme());
    low.registerLanguage("scilab", require_scilab());
    low.registerLanguage("scss", require_scss());
    low.registerLanguage("shell", require_shell());
    low.registerLanguage("smali", require_smali());
    low.registerLanguage(
      "smalltalk",
      require_smalltalk()
    );
    low.registerLanguage("sml", require_sml());
    low.registerLanguage("sqf", require_sqf());
    low.registerLanguage("sql_more", require_sql_more());
    low.registerLanguage("sql", require_sql());
    low.registerLanguage("stan", require_stan());
    low.registerLanguage("stata", require_stata());
    low.registerLanguage("step21", require_step21());
    low.registerLanguage("stylus", require_stylus());
    low.registerLanguage("subunit", require_subunit());
    low.registerLanguage("swift", require_swift());
    low.registerLanguage(
      "taggerscript",
      require_taggerscript()
    );
    low.registerLanguage("yaml", require_yaml());
    low.registerLanguage("tap", require_tap());
    low.registerLanguage("tcl", require_tcl());
    low.registerLanguage("thrift", require_thrift());
    low.registerLanguage("tp", require_tp());
    low.registerLanguage("twig", require_twig());
    low.registerLanguage(
      "typescript",
      require_typescript()
    );
    low.registerLanguage("vala", require_vala());
    low.registerLanguage("vbnet", require_vbnet());
    low.registerLanguage("vbscript", require_vbscript());
    low.registerLanguage(
      "vbscript-html",
      require_vbscript_html()
    );
    low.registerLanguage("verilog", require_verilog());
    low.registerLanguage("vhdl", require_vhdl());
    low.registerLanguage("vim", require_vim());
    low.registerLanguage("x86asm", require_x86asm());
    low.registerLanguage("xl", require_xl());
    low.registerLanguage("xquery", require_xquery());
    low.registerLanguage("zephir", require_zephir());
  }
});

// node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js
function _objectWithoutProperties(e, t) {
  if (null == e) return {};
  var o, r, i = _objectWithoutPropertiesLoose(e, t);
  if (Object.getOwnPropertySymbols) {
    var s = Object.getOwnPropertySymbols(e);
    for (r = 0; r < s.length; r++) o = s[r], t.includes(o) || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);
  }
  return i;
}

// node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
  return n;
}

// node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js
function _arrayWithoutHoles(r) {
  if (Array.isArray(r)) return _arrayLikeToArray(r);
}

// node_modules/@babel/runtime/helpers/esm/iterableToArray.js
function _iterableToArray(r) {
  if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
}

// node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r) return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}

// node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

// node_modules/@babel/runtime/helpers/esm/toConsumableArray.js
function _toConsumableArray(r) {
  return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();
}

// node_modules/@babel/runtime/helpers/esm/defineProperty.js
function _defineProperty(e, r, t) {
  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
    value: t,
    enumerable: true,
    configurable: true,
    writable: true
  }) : e[r] = t, e;
}

// node_modules/react-syntax-highlighter/dist/esm/highlight.js
var import_react2 = __toESM(require_react());

// node_modules/react-syntax-highlighter/dist/esm/create-element.js
init_extends();
var import_react = __toESM(require_react());
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function powerSetPermutations(arr) {
  var arrLength = arr.length;
  if (arrLength === 0 || arrLength === 1) return arr;
  if (arrLength === 2) {
    return [arr[0], arr[1], "".concat(arr[0], ".").concat(arr[1]), "".concat(arr[1], ".").concat(arr[0])];
  }
  if (arrLength === 3) {
    return [arr[0], arr[1], arr[2], "".concat(arr[0], ".").concat(arr[1]), "".concat(arr[0], ".").concat(arr[2]), "".concat(arr[1], ".").concat(arr[0]), "".concat(arr[1], ".").concat(arr[2]), "".concat(arr[2], ".").concat(arr[0]), "".concat(arr[2], ".").concat(arr[1]), "".concat(arr[0], ".").concat(arr[1], ".").concat(arr[2]), "".concat(arr[0], ".").concat(arr[2], ".").concat(arr[1]), "".concat(arr[1], ".").concat(arr[0], ".").concat(arr[2]), "".concat(arr[1], ".").concat(arr[2], ".").concat(arr[0]), "".concat(arr[2], ".").concat(arr[0], ".").concat(arr[1]), "".concat(arr[2], ".").concat(arr[1], ".").concat(arr[0])];
  }
  if (arrLength >= 4) {
    return [arr[0], arr[1], arr[2], arr[3], "".concat(arr[0], ".").concat(arr[1]), "".concat(arr[0], ".").concat(arr[2]), "".concat(arr[0], ".").concat(arr[3]), "".concat(arr[1], ".").concat(arr[0]), "".concat(arr[1], ".").concat(arr[2]), "".concat(arr[1], ".").concat(arr[3]), "".concat(arr[2], ".").concat(arr[0]), "".concat(arr[2], ".").concat(arr[1]), "".concat(arr[2], ".").concat(arr[3]), "".concat(arr[3], ".").concat(arr[0]), "".concat(arr[3], ".").concat(arr[1]), "".concat(arr[3], ".").concat(arr[2]), "".concat(arr[0], ".").concat(arr[1], ".").concat(arr[2]), "".concat(arr[0], ".").concat(arr[1], ".").concat(arr[3]), "".concat(arr[0], ".").concat(arr[2], ".").concat(arr[1]), "".concat(arr[0], ".").concat(arr[2], ".").concat(arr[3]), "".concat(arr[0], ".").concat(arr[3], ".").concat(arr[1]), "".concat(arr[0], ".").concat(arr[3], ".").concat(arr[2]), "".concat(arr[1], ".").concat(arr[0], ".").concat(arr[2]), "".concat(arr[1], ".").concat(arr[0], ".").concat(arr[3]), "".concat(arr[1], ".").concat(arr[2], ".").concat(arr[0]), "".concat(arr[1], ".").concat(arr[2], ".").concat(arr[3]), "".concat(arr[1], ".").concat(arr[3], ".").concat(arr[0]), "".concat(arr[1], ".").concat(arr[3], ".").concat(arr[2]), "".concat(arr[2], ".").concat(arr[0], ".").concat(arr[1]), "".concat(arr[2], ".").concat(arr[0], ".").concat(arr[3]), "".concat(arr[2], ".").concat(arr[1], ".").concat(arr[0]), "".concat(arr[2], ".").concat(arr[1], ".").concat(arr[3]), "".concat(arr[2], ".").concat(arr[3], ".").concat(arr[0]), "".concat(arr[2], ".").concat(arr[3], ".").concat(arr[1]), "".concat(arr[3], ".").concat(arr[0], ".").concat(arr[1]), "".concat(arr[3], ".").concat(arr[0], ".").concat(arr[2]), "".concat(arr[3], ".").concat(arr[1], ".").concat(arr[0]), "".concat(arr[3], ".").concat(arr[1], ".").concat(arr[2]), "".concat(arr[3], ".").concat(arr[2], ".").concat(arr[0]), "".concat(arr[3], ".").concat(arr[2], ".").concat(arr[1]), "".concat(arr[0], ".").concat(arr[1], ".").concat(arr[2], ".").concat(arr[3]), "".concat(arr[0], ".").concat(arr[1], ".").concat(arr[3], ".").concat(arr[2]), "".concat(arr[0], ".").concat(arr[2], ".").concat(arr[1], ".").concat(arr[3]), "".concat(arr[0], ".").concat(arr[2], ".").concat(arr[3], ".").concat(arr[1]), "".concat(arr[0], ".").concat(arr[3], ".").concat(arr[1], ".").concat(arr[2]), "".concat(arr[0], ".").concat(arr[3], ".").concat(arr[2], ".").concat(arr[1]), "".concat(arr[1], ".").concat(arr[0], ".").concat(arr[2], ".").concat(arr[3]), "".concat(arr[1], ".").concat(arr[0], ".").concat(arr[3], ".").concat(arr[2]), "".concat(arr[1], ".").concat(arr[2], ".").concat(arr[0], ".").concat(arr[3]), "".concat(arr[1], ".").concat(arr[2], ".").concat(arr[3], ".").concat(arr[0]), "".concat(arr[1], ".").concat(arr[3], ".").concat(arr[0], ".").concat(arr[2]), "".concat(arr[1], ".").concat(arr[3], ".").concat(arr[2], ".").concat(arr[0]), "".concat(arr[2], ".").concat(arr[0], ".").concat(arr[1], ".").concat(arr[3]), "".concat(arr[2], ".").concat(arr[0], ".").concat(arr[3], ".").concat(arr[1]), "".concat(arr[2], ".").concat(arr[1], ".").concat(arr[0], ".").concat(arr[3]), "".concat(arr[2], ".").concat(arr[1], ".").concat(arr[3], ".").concat(arr[0]), "".concat(arr[2], ".").concat(arr[3], ".").concat(arr[0], ".").concat(arr[1]), "".concat(arr[2], ".").concat(arr[3], ".").concat(arr[1], ".").concat(arr[0]), "".concat(arr[3], ".").concat(arr[0], ".").concat(arr[1], ".").concat(arr[2]), "".concat(arr[3], ".").concat(arr[0], ".").concat(arr[2], ".").concat(arr[1]), "".concat(arr[3], ".").concat(arr[1], ".").concat(arr[0], ".").concat(arr[2]), "".concat(arr[3], ".").concat(arr[1], ".").concat(arr[2], ".").concat(arr[0]), "".concat(arr[3], ".").concat(arr[2], ".").concat(arr[0], ".").concat(arr[1]), "".concat(arr[3], ".").concat(arr[2], ".").concat(arr[1], ".").concat(arr[0])];
  }
}
var classNameCombinations = {};
function getClassNameCombinations(classNames) {
  if (classNames.length === 0 || classNames.length === 1) return classNames;
  var key = classNames.join(".");
  if (!classNameCombinations[key]) {
    classNameCombinations[key] = powerSetPermutations(classNames);
  }
  return classNameCombinations[key];
}
function createStyleObject(classNames) {
  var elementStyle = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  var stylesheet = arguments.length > 2 ? arguments[2] : void 0;
  var nonTokenClassNames = classNames.filter(function(className) {
    return className !== "token";
  });
  var classNamesCombinations = getClassNameCombinations(nonTokenClassNames);
  return classNamesCombinations.reduce(function(styleObject, className) {
    return _objectSpread(_objectSpread({}, styleObject), stylesheet[className]);
  }, elementStyle);
}
function createClassNameString(classNames) {
  return classNames.join(" ");
}
function createChildren(stylesheet, useInlineStyles) {
  var childrenCount = 0;
  return function(children) {
    childrenCount += 1;
    return children.map(function(child, i) {
      return createElement({
        node: child,
        stylesheet,
        useInlineStyles,
        key: "code-segment-".concat(childrenCount, "-").concat(i)
      });
    });
  };
}
function createElement(_ref) {
  var node = _ref.node, stylesheet = _ref.stylesheet, _ref$style = _ref.style, style = _ref$style === void 0 ? {} : _ref$style, useInlineStyles = _ref.useInlineStyles, key = _ref.key;
  var properties = node.properties, type = node.type, TagName = node.tagName, value = node.value;
  if (type === "text") {
    return value;
  } else if (TagName) {
    var childrenCreator = createChildren(stylesheet, useInlineStyles);
    var props;
    if (!useInlineStyles) {
      props = _objectSpread(_objectSpread({}, properties), {}, {
        className: createClassNameString(properties.className)
      });
    } else {
      var allStylesheetSelectors = Object.keys(stylesheet).reduce(function(classes, selector) {
        selector.split(".").forEach(function(className2) {
          if (!classes.includes(className2)) classes.push(className2);
        });
        return classes;
      }, []);
      var startingClassName = properties.className && properties.className.includes("token") ? ["token"] : [];
      var className = properties.className && startingClassName.concat(properties.className.filter(function(className2) {
        return !allStylesheetSelectors.includes(className2);
      }));
      props = _objectSpread(_objectSpread({}, properties), {}, {
        className: createClassNameString(className) || void 0,
        style: createStyleObject(properties.className, Object.assign({}, properties.style, style), stylesheet)
      });
    }
    var children = childrenCreator(node.children);
    return import_react.default.createElement(TagName, _extends({
      key
    }, props), children);
  }
}

// node_modules/react-syntax-highlighter/dist/esm/checkForListedLanguage.js
var checkForListedLanguage_default = function(astGenerator, language) {
  var langs = astGenerator.listLanguages();
  return langs.indexOf(language) !== -1;
};

// node_modules/react-syntax-highlighter/dist/esm/highlight.js
var _excluded = ["language", "children", "style", "customStyle", "codeTagProps", "useInlineStyles", "showLineNumbers", "showInlineLineNumbers", "startingLineNumber", "lineNumberContainerStyle", "lineNumberStyle", "wrapLines", "wrapLongLines", "lineProps", "renderer", "PreTag", "CodeTag", "code", "astGenerator"];
function ownKeys2(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var newLineRegex = /\n/g;
function getNewLines(str) {
  return str.match(newLineRegex);
}
function getAllLineNumbers(_ref) {
  var lines = _ref.lines, startingLineNumber = _ref.startingLineNumber, style = _ref.style;
  return lines.map(function(_, i) {
    var number = i + startingLineNumber;
    return import_react2.default.createElement("span", {
      key: "line-".concat(i),
      className: "react-syntax-highlighter-line-number",
      style: typeof style === "function" ? style(number) : style
    }, "".concat(number, "\n"));
  });
}
function AllLineNumbers(_ref2) {
  var codeString = _ref2.codeString, codeStyle = _ref2.codeStyle, _ref2$containerStyle = _ref2.containerStyle, containerStyle = _ref2$containerStyle === void 0 ? {
    "float": "left",
    paddingRight: "10px"
  } : _ref2$containerStyle, _ref2$numberStyle = _ref2.numberStyle, numberStyle = _ref2$numberStyle === void 0 ? {} : _ref2$numberStyle, startingLineNumber = _ref2.startingLineNumber;
  return import_react2.default.createElement("code", {
    style: Object.assign({}, codeStyle, containerStyle)
  }, getAllLineNumbers({
    lines: codeString.replace(/\n$/, "").split("\n"),
    style: numberStyle,
    startingLineNumber
  }));
}
function getEmWidthOfNumber(num) {
  return "".concat(num.toString().length, ".25em");
}
function getInlineLineNumber(lineNumber, inlineLineNumberStyle) {
  return {
    type: "element",
    tagName: "span",
    properties: {
      key: "line-number--".concat(lineNumber),
      className: ["comment", "linenumber", "react-syntax-highlighter-line-number"],
      style: inlineLineNumberStyle
    },
    children: [{
      type: "text",
      value: lineNumber
    }]
  };
}
function assembleLineNumberStyles(lineNumberStyle, lineNumber, largestLineNumber) {
  var defaultLineNumberStyle = {
    display: "inline-block",
    minWidth: getEmWidthOfNumber(largestLineNumber),
    paddingRight: "1em",
    textAlign: "right",
    userSelect: "none"
  };
  var customLineNumberStyle = typeof lineNumberStyle === "function" ? lineNumberStyle(lineNumber) : lineNumberStyle;
  var assembledStyle = _objectSpread2(_objectSpread2({}, defaultLineNumberStyle), customLineNumberStyle);
  return assembledStyle;
}
function createLineElement(_ref3) {
  var children = _ref3.children, lineNumber = _ref3.lineNumber, lineNumberStyle = _ref3.lineNumberStyle, largestLineNumber = _ref3.largestLineNumber, showInlineLineNumbers = _ref3.showInlineLineNumbers, _ref3$lineProps = _ref3.lineProps, lineProps = _ref3$lineProps === void 0 ? {} : _ref3$lineProps, _ref3$className = _ref3.className, className = _ref3$className === void 0 ? [] : _ref3$className, showLineNumbers = _ref3.showLineNumbers, wrapLongLines = _ref3.wrapLongLines;
  var properties = typeof lineProps === "function" ? lineProps(lineNumber) : lineProps;
  properties["className"] = className;
  if (lineNumber && showInlineLineNumbers) {
    var inlineLineNumberStyle = assembleLineNumberStyles(lineNumberStyle, lineNumber, largestLineNumber);
    children.unshift(getInlineLineNumber(lineNumber, inlineLineNumberStyle));
  }
  if (wrapLongLines & showLineNumbers) {
    properties.style = _objectSpread2(_objectSpread2({}, properties.style), {}, {
      display: "flex"
    });
  }
  return {
    type: "element",
    tagName: "span",
    properties,
    children
  };
}
function flattenCodeTree(tree) {
  var className = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
  var newTree = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
  for (var i = 0; i < tree.length; i++) {
    var node = tree[i];
    if (node.type === "text") {
      newTree.push(createLineElement({
        children: [node],
        className: _toConsumableArray(new Set(className))
      }));
    } else if (node.children) {
      var classNames = className.concat(node.properties.className);
      flattenCodeTree(node.children, classNames).forEach(function(i2) {
        return newTree.push(i2);
      });
    }
  }
  return newTree;
}
function processLines(codeTree, wrapLines, lineProps, showLineNumbers, showInlineLineNumbers, startingLineNumber, largestLineNumber, lineNumberStyle, wrapLongLines) {
  var _ref4;
  var tree = flattenCodeTree(codeTree.value);
  var newTree = [];
  var lastLineBreakIndex = -1;
  var index = 0;
  function createWrappedLine(children2, lineNumber2) {
    var className = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
    return createLineElement({
      children: children2,
      lineNumber: lineNumber2,
      lineNumberStyle,
      largestLineNumber,
      showInlineLineNumbers,
      lineProps,
      className,
      showLineNumbers,
      wrapLongLines
    });
  }
  function createUnwrappedLine(children2, lineNumber2) {
    if (showLineNumbers && lineNumber2 && showInlineLineNumbers) {
      var inlineLineNumberStyle = assembleLineNumberStyles(lineNumberStyle, lineNumber2, largestLineNumber);
      children2.unshift(getInlineLineNumber(lineNumber2, inlineLineNumberStyle));
    }
    return children2;
  }
  function createLine(children2, lineNumber2) {
    var className = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
    return wrapLines || className.length > 0 ? createWrappedLine(children2, lineNumber2, className) : createUnwrappedLine(children2, lineNumber2);
  }
  var _loop = function _loop2() {
    var node = tree[index];
    var value = node.children[0].value;
    var newLines = getNewLines(value);
    if (newLines) {
      var splitValue = value.split("\n");
      splitValue.forEach(function(text, i) {
        var lineNumber2 = showLineNumbers && newTree.length + startingLineNumber;
        var newChild = {
          type: "text",
          value: "".concat(text, "\n")
        };
        if (i === 0) {
          var _children = tree.slice(lastLineBreakIndex + 1, index).concat(createLineElement({
            children: [newChild],
            className: node.properties.className
          }));
          var _line = createLine(_children, lineNumber2);
          newTree.push(_line);
        } else if (i === splitValue.length - 1) {
          var stringChild = tree[index + 1] && tree[index + 1].children && tree[index + 1].children[0];
          var lastLineInPreviousSpan = {
            type: "text",
            value: "".concat(text)
          };
          if (stringChild) {
            var newElem = createLineElement({
              children: [lastLineInPreviousSpan],
              className: node.properties.className
            });
            tree.splice(index + 1, 0, newElem);
          } else {
            var _children2 = [lastLineInPreviousSpan];
            var _line2 = createLine(_children2, lineNumber2, node.properties.className);
            newTree.push(_line2);
          }
        } else {
          var _children3 = [newChild];
          var _line3 = createLine(_children3, lineNumber2, node.properties.className);
          newTree.push(_line3);
        }
      });
      lastLineBreakIndex = index;
    }
    index++;
  };
  while (index < tree.length) {
    _loop();
  }
  if (lastLineBreakIndex !== tree.length - 1) {
    var children = tree.slice(lastLineBreakIndex + 1, tree.length);
    if (children && children.length) {
      var lineNumber = showLineNumbers && newTree.length + startingLineNumber;
      var line = createLine(children, lineNumber);
      newTree.push(line);
    }
  }
  return wrapLines ? newTree : (_ref4 = []).concat.apply(_ref4, newTree);
}
function defaultRenderer(_ref5) {
  var rows = _ref5.rows, stylesheet = _ref5.stylesheet, useInlineStyles = _ref5.useInlineStyles;
  return rows.map(function(node, i) {
    return createElement({
      node,
      stylesheet,
      useInlineStyles,
      key: "code-segement".concat(i)
    });
  });
}
function isHighlightJs(astGenerator) {
  return astGenerator && typeof astGenerator.highlightAuto !== "undefined";
}
function getCodeTree(_ref6) {
  var astGenerator = _ref6.astGenerator, language = _ref6.language, code = _ref6.code, defaultCodeValue = _ref6.defaultCodeValue;
  if (isHighlightJs(astGenerator)) {
    var hasLanguage = checkForListedLanguage_default(astGenerator, language);
    if (language === "text") {
      return {
        value: defaultCodeValue,
        language: "text"
      };
    } else if (hasLanguage) {
      return astGenerator.highlight(language, code);
    } else {
      return astGenerator.highlightAuto(code);
    }
  }
  try {
    return language && language !== "text" ? {
      value: astGenerator.highlight(code, language)
    } : {
      value: defaultCodeValue
    };
  } catch (e) {
    return {
      value: defaultCodeValue
    };
  }
}
function highlight_default(defaultAstGenerator, defaultStyle) {
  return function SyntaxHighlighter(_ref7) {
    var language = _ref7.language, children = _ref7.children, _ref7$style = _ref7.style, style = _ref7$style === void 0 ? defaultStyle : _ref7$style, _ref7$customStyle = _ref7.customStyle, customStyle = _ref7$customStyle === void 0 ? {} : _ref7$customStyle, _ref7$codeTagProps = _ref7.codeTagProps, codeTagProps = _ref7$codeTagProps === void 0 ? {
      className: language ? "language-".concat(language) : void 0,
      style: _objectSpread2(_objectSpread2({}, style['code[class*="language-"]']), style['code[class*="language-'.concat(language, '"]')])
    } : _ref7$codeTagProps, _ref7$useInlineStyles = _ref7.useInlineStyles, useInlineStyles = _ref7$useInlineStyles === void 0 ? true : _ref7$useInlineStyles, _ref7$showLineNumbers = _ref7.showLineNumbers, showLineNumbers = _ref7$showLineNumbers === void 0 ? false : _ref7$showLineNumbers, _ref7$showInlineLineN = _ref7.showInlineLineNumbers, showInlineLineNumbers = _ref7$showInlineLineN === void 0 ? true : _ref7$showInlineLineN, _ref7$startingLineNum = _ref7.startingLineNumber, startingLineNumber = _ref7$startingLineNum === void 0 ? 1 : _ref7$startingLineNum, lineNumberContainerStyle = _ref7.lineNumberContainerStyle, _ref7$lineNumberStyle = _ref7.lineNumberStyle, lineNumberStyle = _ref7$lineNumberStyle === void 0 ? {} : _ref7$lineNumberStyle, wrapLines = _ref7.wrapLines, _ref7$wrapLongLines = _ref7.wrapLongLines, wrapLongLines = _ref7$wrapLongLines === void 0 ? false : _ref7$wrapLongLines, _ref7$lineProps = _ref7.lineProps, lineProps = _ref7$lineProps === void 0 ? {} : _ref7$lineProps, renderer = _ref7.renderer, _ref7$PreTag = _ref7.PreTag, PreTag = _ref7$PreTag === void 0 ? "pre" : _ref7$PreTag, _ref7$CodeTag = _ref7.CodeTag, CodeTag = _ref7$CodeTag === void 0 ? "code" : _ref7$CodeTag, _ref7$code = _ref7.code, code = _ref7$code === void 0 ? (Array.isArray(children) ? children[0] : children) || "" : _ref7$code, astGenerator = _ref7.astGenerator, rest = _objectWithoutProperties(_ref7, _excluded);
    astGenerator = astGenerator || defaultAstGenerator;
    var allLineNumbers = showLineNumbers ? import_react2.default.createElement(AllLineNumbers, {
      containerStyle: lineNumberContainerStyle,
      codeStyle: codeTagProps.style || {},
      numberStyle: lineNumberStyle,
      startingLineNumber,
      codeString: code
    }) : null;
    var defaultPreStyle = style.hljs || style['pre[class*="language-"]'] || {
      backgroundColor: "#fff"
    };
    var generatorClassName = isHighlightJs(astGenerator) ? "hljs" : "prismjs";
    var preProps = useInlineStyles ? Object.assign({}, rest, {
      style: Object.assign({}, defaultPreStyle, customStyle)
    }) : Object.assign({}, rest, {
      className: rest.className ? "".concat(generatorClassName, " ").concat(rest.className) : generatorClassName,
      style: Object.assign({}, customStyle)
    });
    if (wrapLongLines) {
      codeTagProps.style = _objectSpread2(_objectSpread2({}, codeTagProps.style), {}, {
        whiteSpace: "pre-wrap"
      });
    } else {
      codeTagProps.style = _objectSpread2(_objectSpread2({}, codeTagProps.style), {}, {
        whiteSpace: "pre"
      });
    }
    if (!astGenerator) {
      return import_react2.default.createElement(PreTag, preProps, allLineNumbers, import_react2.default.createElement(CodeTag, codeTagProps, code));
    }
    if (wrapLines === void 0 && renderer || wrapLongLines) wrapLines = true;
    renderer = renderer || defaultRenderer;
    var defaultCodeValue = [{
      type: "text",
      value: code
    }];
    var codeTree = getCodeTree({
      astGenerator,
      language,
      code,
      defaultCodeValue
    });
    if (codeTree.language === null) {
      codeTree.value = defaultCodeValue;
    }
    var largestLineNumber = codeTree.value.length + startingLineNumber;
    var rows = processLines(codeTree, wrapLines, lineProps, showLineNumbers, showInlineLineNumbers, startingLineNumber, largestLineNumber, lineNumberStyle, wrapLongLines);
    return import_react2.default.createElement(PreTag, preProps, import_react2.default.createElement(CodeTag, codeTagProps, !showInlineLineNumbers && allLineNumbers, renderer({
      rows,
      stylesheet: style,
      useInlineStyles
    })));
  };
}

// node_modules/react-syntax-highlighter/dist/esm/default-highlight.js
var import_lowlight = __toESM(require_lowlight());

// node_modules/react-syntax-highlighter/dist/esm/languages/hljs/supported-languages.js
var supported_languages_default = ["1c", "abnf", "accesslog", "actionscript", "ada", "angelscript", "apache", "applescript", "arcade", "arduino", "armasm", "asciidoc", "aspectj", "autohotkey", "autoit", "avrasm", "awk", "axapta", "bash", "basic", "bnf", "brainfuck", "c-like", "c", "cal", "capnproto", "ceylon", "clean", "clojure-repl", "clojure", "cmake", "coffeescript", "coq", "cos", "cpp", "crmsh", "crystal", "csharp", "csp", "css", "d", "dart", "delphi", "diff", "django", "dns", "dockerfile", "dos", "dsconfig", "dts", "dust", "ebnf", "elixir", "elm", "erb", "erlang-repl", "erlang", "excel", "fix", "flix", "fortran", "fsharp", "gams", "gauss", "gcode", "gherkin", "glsl", "gml", "go", "golo", "gradle", "groovy", "haml", "handlebars", "haskell", "haxe", "hsp", "htmlbars", "http", "hy", "inform7", "ini", "irpf90", "isbl", "java", "javascript", "jboss-cli", "json", "julia-repl", "julia", "kotlin", "lasso", "latex", "ldif", "leaf", "less", "lisp", "livecodeserver", "livescript", "llvm", "lsl", "lua", "makefile", "markdown", "mathematica", "matlab", "maxima", "mel", "mercury", "mipsasm", "mizar", "mojolicious", "monkey", "moonscript", "n1ql", "nginx", "nim", "nix", "node-repl", "nsis", "objectivec", "ocaml", "openscad", "oxygene", "parser3", "perl", "pf", "pgsql", "php-template", "php", "plaintext", "pony", "powershell", "processing", "profile", "prolog", "properties", "protobuf", "puppet", "purebasic", "python-repl", "python", "q", "qml", "r", "reasonml", "rib", "roboconf", "routeros", "rsl", "ruby", "ruleslanguage", "rust", "sas", "scala", "scheme", "scilab", "scss", "shell", "smali", "smalltalk", "sml", "sqf", "sql", "sql_more", "stan", "stata", "step21", "stylus", "subunit", "swift", "taggerscript", "tap", "tcl", "thrift", "tp", "twig", "typescript", "vala", "vbnet", "vbscript-html", "vbscript", "verilog", "vhdl", "vim", "x86asm", "xl", "xml", "xquery", "yaml", "zephir"];

// node_modules/react-syntax-highlighter/dist/esm/default-highlight.js
var highlighter = highlight_default(import_lowlight.default, default_style_default);
highlighter.supportedLanguages = supported_languages_default;
var default_highlight_default = highlighter;

export {
  _defineProperty,
  createElement,
  checkForListedLanguage_default,
  highlight_default,
  default_highlight_default
};
//# sourceMappingURL=chunk-YILBD4CG.js.map
